dust some of this off or find other interesting bits see notes from past yrs
 used: berkeleyParser, opennlp(now part of:..nlp2rdf), stanford-parser.(CoreNLP), nyu?
  https://github.com/slavpetrov/berkeleyparser ; https://github.com/NLP2RDF http://site.nlp2rdf.org/

λ▶107 j2Lat43: /km3/nlp> tail ../.note
λ▶92 j2Lat43: /ai2/km3> cp km3.asd nlp.asd  ;then edit just a bit
λ▶108 j2Lat43: /km3/nlp> egrep -v "^;;" ../nlp.asd >nlp.asd
λ▶115 j2Lat43: /km3/nlp> ln -s . nlp  ;so I can work in this subdir for now
nlp.asd incl ../components http://www.cs.utexas.edu/users/mfkb/RKF/tree/ 
λ▶119 j2Lat43: /km3/nlp> cat ld.cl
(lkm3)
(defvar *fl2* (list-lines "../../vq.txt")) ;was from ../in before
;(defun get-fl2 (n) (nth n *fl2*))
(ql 'nlp)
(defun berk-n (n) (berk (get-fl2 n)))
;1-8133 returns sexp parse in a str 
 ;will get2see where/if rest of processing still here
(defun berk2n (n) (berk2 (get-fl2 n))) ;yes as real sexpr instead of in str
;will want to load the right&wrong answers as well
will add ld.cl vs parts of it here, but not all daily output yet
USER(5): consider opencyc if need be; http://localhost:3602/cgi-bin/cg?cb-start ~/Documents/www/www.opencyc.org/downloads/opencyc-owl
λ▶135 j15Lat43: /km3/nlp> ls1 sci/*/*.km >lsci.cl
 
;loaded sci kb, have more parsers, need ner map txt to concepts (that have relations)
; use kb wn slots&class names, get longest matches along this
λ▶6 f3Lat43: /km3/nlp> cp ld.cl nl2.cl
 
λ▶41 f3Lat43: /km3/nlp> mv nc.cl nc0.cl
λ▶42 f3Lat43: /km3/nlp> cp /home/bobak/lsp/git/LispUtils/nc.cl .
 
test IBM blumix (Watson) NLP http://www.alchemyapi.com/api/combined/urls.html ./py/.note: 
could make or alter a restful service that was not all alchemy 
want not only caching of final but of intermediate as some things build 
could get local km taxonomys re to the queries
 

Maarten van Gompel @proycon Released CLAM v2.1: Turn your #nlp command line tools into #restful webservices. Please upgrade! https://github.com/proycon/clam/releases/tag/v2.1.0 … 
 CLAM: Computational Linguistics Application Mediator 
 CLAM allows you to quickly and transparently transform your Natural Language Processing application into a RESTful webservice, with which both human end-users as well as automated clients can interact.  
=want to generalize, wrap MITIE, and use w/the tup.cl code
